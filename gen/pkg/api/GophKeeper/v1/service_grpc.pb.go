// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/api/GophKeeper/v1/service.proto

package GophKeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeperService_Register_FullMethodName              = "/pkg.api.gophkeeper.v1.GophKeeperService/Register"
	GophKeeperService_Login_FullMethodName                 = "/pkg.api.gophkeeper.v1.GophKeeperService/Login"
	GophKeeperService_MultipartUploadFile_FullMethodName   = "/pkg.api.gophkeeper.v1.GophKeeperService/MultipartUploadFile"
	GophKeeperService_BlockStore_FullMethodName            = "/pkg.api.gophkeeper.v1.GophKeeperService/BlockStore"
	GophKeeperService_Ping_FullMethodName                  = "/pkg.api.gophkeeper.v1.GophKeeperService/Ping"
	GophKeeperService_MultipartDownloadFile_FullMethodName = "/pkg.api.gophkeeper.v1.GophKeeperService/MultipartDownloadFile"
	GophKeeperService_ApplyChanges_FullMethodName          = "/pkg.api.gophkeeper.v1.GophKeeperService/ApplyChanges"
)

// GophKeeperServiceClient is the client API for GophKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperServiceClient interface {
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	MultipartUploadFile(ctx context.Context, opts ...grpc.CallOption) (GophKeeperService_MultipartUploadFileClient, error)
	BlockStore(ctx context.Context, opts ...grpc.CallOption) (GophKeeperService_BlockStoreClient, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MultipartDownloadFile(ctx context.Context, in *MultipartDownloadFileRequest, opts ...grpc.CallOption) (GophKeeperService_MultipartDownloadFileClient, error)
	ApplyChanges(ctx context.Context, in *ApplyChangesRequest, opts ...grpc.CallOption) (*ApplyChangesResponse, error)
}

type gophKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperServiceClient(cc grpc.ClientConnInterface) GophKeeperServiceClient {
	return &gophKeeperServiceClient{cc}
}

func (c *gophKeeperServiceClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, GophKeeperService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, GophKeeperService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) MultipartUploadFile(ctx context.Context, opts ...grpc.CallOption) (GophKeeperService_MultipartUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeperService_ServiceDesc.Streams[0], GophKeeperService_MultipartUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperServiceMultipartUploadFileClient{stream}
	return x, nil
}

type GophKeeperService_MultipartUploadFileClient interface {
	Send(*MultipartUploadFileRequest) error
	CloseAndRecv() (*MultipartUploadFileResponse, error)
	grpc.ClientStream
}

type gophKeeperServiceMultipartUploadFileClient struct {
	grpc.ClientStream
}

func (x *gophKeeperServiceMultipartUploadFileClient) Send(m *MultipartUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gophKeeperServiceMultipartUploadFileClient) CloseAndRecv() (*MultipartUploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MultipartUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperServiceClient) BlockStore(ctx context.Context, opts ...grpc.CallOption) (GophKeeperService_BlockStoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeperService_ServiceDesc.Streams[1], GophKeeperService_BlockStore_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperServiceBlockStoreClient{stream}
	return x, nil
}

type GophKeeperService_BlockStoreClient interface {
	Send(*BlockStoreRequest) error
	CloseAndRecv() (*BlockStoreResponse, error)
	grpc.ClientStream
}

type gophKeeperServiceBlockStoreClient struct {
	grpc.ClientStream
}

func (x *gophKeeperServiceBlockStoreClient) Send(m *BlockStoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gophKeeperServiceBlockStoreClient) CloseAndRecv() (*BlockStoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlockStoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeperService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) MultipartDownloadFile(ctx context.Context, in *MultipartDownloadFileRequest, opts ...grpc.CallOption) (GophKeeperService_MultipartDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeperService_ServiceDesc.Streams[2], GophKeeperService_MultipartDownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperServiceMultipartDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GophKeeperService_MultipartDownloadFileClient interface {
	Recv() (*MultipartDownloadFileResponse, error)
	grpc.ClientStream
}

type gophKeeperServiceMultipartDownloadFileClient struct {
	grpc.ClientStream
}

func (x *gophKeeperServiceMultipartDownloadFileClient) Recv() (*MultipartDownloadFileResponse, error) {
	m := new(MultipartDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperServiceClient) ApplyChanges(ctx context.Context, in *ApplyChangesRequest, opts ...grpc.CallOption) (*ApplyChangesResponse, error) {
	out := new(ApplyChangesResponse)
	err := c.cc.Invoke(ctx, GophKeeperService_ApplyChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServiceServer is the server API for GophKeeperService service.
// All implementations must embed UnimplementedGophKeeperServiceServer
// for forward compatibility
type GophKeeperServiceServer interface {
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	MultipartUploadFile(GophKeeperService_MultipartUploadFileServer) error
	BlockStore(GophKeeperService_BlockStoreServer) error
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	MultipartDownloadFile(*MultipartDownloadFileRequest, GophKeeperService_MultipartDownloadFileServer) error
	ApplyChanges(context.Context, *ApplyChangesRequest) (*ApplyChangesResponse, error)
	mustEmbedUnimplementedGophKeeperServiceServer()
}

// UnimplementedGophKeeperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServiceServer struct {
}

func (UnimplementedGophKeeperServiceServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServiceServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServiceServer) MultipartUploadFile(GophKeeperService_MultipartUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipartUploadFile not implemented")
}
func (UnimplementedGophKeeperServiceServer) BlockStore(GophKeeperService_BlockStoreServer) error {
	return status.Errorf(codes.Unimplemented, "method BlockStore not implemented")
}
func (UnimplementedGophKeeperServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGophKeeperServiceServer) MultipartDownloadFile(*MultipartDownloadFileRequest, GophKeeperService_MultipartDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipartDownloadFile not implemented")
}
func (UnimplementedGophKeeperServiceServer) ApplyChanges(context.Context, *ApplyChangesRequest) (*ApplyChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyChanges not implemented")
}
func (UnimplementedGophKeeperServiceServer) mustEmbedUnimplementedGophKeeperServiceServer() {}

// UnsafeGophKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServiceServer will
// result in compilation errors.
type UnsafeGophKeeperServiceServer interface {
	mustEmbedUnimplementedGophKeeperServiceServer()
}

func RegisterGophKeeperServiceServer(s grpc.ServiceRegistrar, srv GophKeeperServiceServer) {
	s.RegisterService(&GophKeeperService_ServiceDesc, srv)
}

func _GophKeeperService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_MultipartUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperServiceServer).MultipartUploadFile(&gophKeeperServiceMultipartUploadFileServer{stream})
}

type GophKeeperService_MultipartUploadFileServer interface {
	SendAndClose(*MultipartUploadFileResponse) error
	Recv() (*MultipartUploadFileRequest, error)
	grpc.ServerStream
}

type gophKeeperServiceMultipartUploadFileServer struct {
	grpc.ServerStream
}

func (x *gophKeeperServiceMultipartUploadFileServer) SendAndClose(m *MultipartUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gophKeeperServiceMultipartUploadFileServer) Recv() (*MultipartUploadFileRequest, error) {
	m := new(MultipartUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GophKeeperService_BlockStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperServiceServer).BlockStore(&gophKeeperServiceBlockStoreServer{stream})
}

type GophKeeperService_BlockStoreServer interface {
	SendAndClose(*BlockStoreResponse) error
	Recv() (*BlockStoreRequest, error)
	grpc.ServerStream
}

type gophKeeperServiceBlockStoreServer struct {
	grpc.ServerStream
}

func (x *gophKeeperServiceBlockStoreServer) SendAndClose(m *BlockStoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gophKeeperServiceBlockStoreServer) Recv() (*BlockStoreRequest, error) {
	m := new(BlockStoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GophKeeperService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_MultipartDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultipartDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophKeeperServiceServer).MultipartDownloadFile(m, &gophKeeperServiceMultipartDownloadFileServer{stream})
}

type GophKeeperService_MultipartDownloadFileServer interface {
	Send(*MultipartDownloadFileResponse) error
	grpc.ServerStream
}

type gophKeeperServiceMultipartDownloadFileServer struct {
	grpc.ServerStream
}

func (x *gophKeeperServiceMultipartDownloadFileServer) Send(m *MultipartDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GophKeeperService_ApplyChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).ApplyChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_ApplyChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).ApplyChanges(ctx, req.(*ApplyChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeperService_ServiceDesc is the grpc.ServiceDesc for GophKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.api.gophkeeper.v1.GophKeeperService",
	HandlerType: (*GophKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GophKeeperService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeperService_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GophKeeperService_Ping_Handler,
		},
		{
			MethodName: "ApplyChanges",
			Handler:    _GophKeeperService_ApplyChanges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultipartUploadFile",
			Handler:       _GophKeeperService_MultipartUploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BlockStore",
			Handler:       _GophKeeperService_BlockStore_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultipartDownloadFile",
			Handler:       _GophKeeperService_MultipartDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/GophKeeper/v1/service.proto",
}
