// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kripsy/GophKeeper/internal/server/controller (interfaces: SyncStatus)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSyncStatus is a mock of SyncStatus interface.
type MockSyncStatus struct {
	ctrl     *gomock.Controller
	recorder *MockSyncStatusMockRecorder
}

// MockSyncStatusMockRecorder is the mock recorder for MockSyncStatus.
type MockSyncStatusMockRecorder struct {
	mock *MockSyncStatus
}

// NewMockSyncStatus creates a new mock instance.
func NewMockSyncStatus(ctrl *gomock.Controller) *MockSyncStatus {
	mock := &MockSyncStatus{ctrl: ctrl}
	mock.recorder = &MockSyncStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncStatus) EXPECT() *MockSyncStatusMockRecorder {
	return m.recorder
}

// AddSync mocks base method.
func (m *MockSyncStatus) AddSync(arg0 int, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSync", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSync indicates an expected call of AddSync.
func (mr *MockSyncStatusMockRecorder) AddSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSync", reflect.TypeOf((*MockSyncStatus)(nil).AddSync), arg0, arg1)
}

// IsSyncExists mocks base method.
func (m *MockSyncStatus) IsSyncExists(arg0 int, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSyncExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSyncExists indicates an expected call of IsSyncExists.
func (mr *MockSyncStatusMockRecorder) IsSyncExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSyncExists", reflect.TypeOf((*MockSyncStatus)(nil).IsSyncExists), arg0, arg1)
}

// RemoveClientSync mocks base method.
func (m *MockSyncStatus) RemoveClientSync(arg0 int, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClientSync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClientSync indicates an expected call of RemoveClientSync.
func (mr *MockSyncStatusMockRecorder) RemoveClientSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientSync", reflect.TypeOf((*MockSyncStatus)(nil).RemoveClientSync), arg0, arg1)
}
