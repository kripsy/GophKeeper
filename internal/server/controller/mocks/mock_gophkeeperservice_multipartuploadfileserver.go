// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kripsy/GophKeeper/gen/pkg/api/GophKeeper/v1 (interfaces: GophKeeperService_MultipartUploadFileServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	GophKeeper "github.com/kripsy/GophKeeper/gen/pkg/api/GophKeeper/v1"
	metadata "google.golang.org/grpc/metadata"
)

// MockGophKeeperService_MultipartUploadFileServer is a mock of GophKeeperService_MultipartUploadFileServer interface.
type MockGophKeeperService_MultipartUploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperService_MultipartUploadFileServerMockRecorder
}

// MockGophKeeperService_MultipartUploadFileServerMockRecorder is the mock recorder for MockGophKeeperService_MultipartUploadFileServer.
type MockGophKeeperService_MultipartUploadFileServerMockRecorder struct {
	mock *MockGophKeeperService_MultipartUploadFileServer
}

// NewMockGophKeeperService_MultipartUploadFileServer creates a new mock instance.
func NewMockGophKeeperService_MultipartUploadFileServer(ctrl *gomock.Controller) *MockGophKeeperService_MultipartUploadFileServer {
	mock := &MockGophKeeperService_MultipartUploadFileServer{ctrl: ctrl}
	mock.recorder = &MockGophKeeperService_MultipartUploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperService_MultipartUploadFileServer) EXPECT() *MockGophKeeperService_MultipartUploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) Recv() (*GophKeeper.MultipartUploadFileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*GophKeeper.MultipartUploadFileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) SendAndClose(arg0 *GophKeeper.MultipartUploadFileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockGophKeeperService_MultipartUploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockGophKeeperService_MultipartUploadFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGophKeeperService_MultipartUploadFileServer)(nil).SetTrailer), arg0)
}
