// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kripsy/GophKeeper/internal/server/controller (interfaces: SecretUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kripsy/GophKeeper/internal/models"
)

// MockSecretUseCase is a mock of SecretUseCase interface.
type MockSecretUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSecretUseCaseMockRecorder
}

// MockSecretUseCaseMockRecorder is the mock recorder for MockSecretUseCase.
type MockSecretUseCaseMockRecorder struct {
	mock *MockSecretUseCase
}

// NewMockSecretUseCase creates a new mock instance.
func NewMockSecretUseCase(ctrl *gomock.Controller) *MockSecretUseCase {
	mock := &MockSecretUseCase{ctrl: ctrl}
	mock.recorder = &MockSecretUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretUseCase) EXPECT() *MockSecretUseCaseMockRecorder {
	return m.recorder
}

// ApplyChanges mocks base method.
func (m *MockSecretUseCase) ApplyChanges(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChanges", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyChanges indicates an expected call of ApplyChanges.
func (mr *MockSecretUseCaseMockRecorder) ApplyChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChanges", reflect.TypeOf((*MockSecretUseCase)(nil).ApplyChanges), arg0, arg1)
}

// CreateBucketSecret mocks base method.
func (m *MockSecretUseCase) CreateBucketSecret(arg0 context.Context, arg1 string, arg2 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketSecret indicates an expected call of CreateBucketSecret.
func (mr *MockSecretUseCaseMockRecorder) CreateBucketSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketSecret", reflect.TypeOf((*MockSecretUseCase)(nil).CreateBucketSecret), arg0, arg1, arg2)
}

// DiscardChanges mocks base method.
func (m *MockSecretUseCase) DiscardChanges(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardChanges", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscardChanges indicates an expected call of DiscardChanges.
func (mr *MockSecretUseCaseMockRecorder) DiscardChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardChanges", reflect.TypeOf((*MockSecretUseCase)(nil).DiscardChanges), arg0, arg1)
}

// MultipartDownloadFile mocks base method.
func (m *MockSecretUseCase) MultipartDownloadFile(arg0 context.Context, arg1 *models.MultipartDownloadFileRequest, arg2 string) (chan *models.MultipartDownloadFileResponse, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartDownloadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(chan *models.MultipartDownloadFileResponse)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// MultipartDownloadFile indicates an expected call of MultipartDownloadFile.
func (mr *MockSecretUseCaseMockRecorder) MultipartDownloadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartDownloadFile", reflect.TypeOf((*MockSecretUseCase)(nil).MultipartDownloadFile), arg0, arg1, arg2)
}

// MultipartUploadFile mocks base method.
func (m *MockSecretUseCase) MultipartUploadFile(arg0 context.Context, arg1 <-chan *models.MultipartUploadFileData, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartUploadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartUploadFile indicates an expected call of MultipartUploadFile.
func (mr *MockSecretUseCaseMockRecorder) MultipartUploadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartUploadFile", reflect.TypeOf((*MockSecretUseCase)(nil).MultipartUploadFile), arg0, arg1, arg2)
}
