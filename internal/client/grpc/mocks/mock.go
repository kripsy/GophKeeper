// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/client/grpc/client.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplyChanges mocks base method.
func (m *MockClient) ApplyChanges(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChanges", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChanges indicates an expected call of ApplyChanges.
func (mr *MockClientMockRecorder) ApplyChanges(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChanges", reflect.TypeOf((*MockClient)(nil).ApplyChanges), ctx, id)
}

// BlockStore mocks base method.
func (m *MockClient) BlockStore(ctx context.Context, syncKey string, guidChan chan string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockStore", ctx, syncKey, guidChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockStore indicates an expected call of BlockStore.
func (mr *MockClientMockRecorder) BlockStore(ctx, syncKey, guidChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockStore", reflect.TypeOf((*MockClient)(nil).BlockStore), ctx, syncKey, guidChan)
}

// DownloadFile mocks base method.
func (m *MockClient) DownloadFile(ctx context.Context, fileName, fileHash, syncKey string) (chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, fileName, fileHash, syncKey)
	ret0, _ := ret[0].(chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockClientMockRecorder) DownloadFile(ctx, fileName, fileHash, syncKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockClient)(nil).DownloadFile), ctx, fileName, fileHash, syncKey)
}

// IsAvailable mocks base method.
func (m *MockClient) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockClientMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockClient)(nil).IsAvailable))
}

// IsNotAvailable mocks base method.
func (m *MockClient) IsNotAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotAvailable indicates an expected call of IsNotAvailable.
func (mr *MockClientMockRecorder) IsNotAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotAvailable", reflect.TypeOf((*MockClient)(nil).IsNotAvailable))
}

// Login mocks base method.
func (m *MockClient) Login(login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), login, password)
}

// Register mocks base method.
func (m *MockClient) Register(login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockClientMockRecorder) Register(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClient)(nil).Register), login, password)
}

// TryToConnect mocks base method.
func (m *MockClient) TryToConnect() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToConnect")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryToConnect indicates an expected call of TryToConnect.
func (mr *MockClientMockRecorder) TryToConnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToConnect", reflect.TypeOf((*MockClient)(nil).TryToConnect))
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(ctx context.Context, fileName, hash, syncKey string, data chan []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, fileName, hash, syncKey, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(ctx, fileName, hash, syncKey, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), ctx, fileName, hash, syncKey, data)
}
