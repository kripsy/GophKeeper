// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/client/infrastrucrure/filemanager/filemanager.go

// Package mock_filemanager is a generated GoMock package.
package mock_filemanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	filemanager "github.com/kripsy/GophKeeper/internal/client/infrastrucrure/filemanager"
	models "github.com/kripsy/GophKeeper/internal/models"
)

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// AddEncryptedToStorage mocks base method.
func (m *MockFileStorage) AddEncryptedToStorage(name string, data chan []byte, info models.DataInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEncryptedToStorage", name, data, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEncryptedToStorage indicates an expected call of AddEncryptedToStorage.
func (mr *MockFileStorageMockRecorder) AddEncryptedToStorage(name, data, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEncryptedToStorage", reflect.TypeOf((*MockFileStorage)(nil).AddEncryptedToStorage), name, data, info)
}

// AddFileToStorage mocks base method.
func (m *MockFileStorage) AddFileToStorage(newFile bool, name, filePath string, info models.DataInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToStorage", newFile, name, filePath, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToStorage indicates an expected call of AddFileToStorage.
func (mr *MockFileStorageMockRecorder) AddFileToStorage(newFile, name, filePath, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToStorage", reflect.TypeOf((*MockFileStorage)(nil).AddFileToStorage), newFile, name, filePath, info)
}

// AddToStorage mocks base method.
func (m *MockFileStorage) AddToStorage(name string, data filemanager.Data, info models.DataInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToStorage", name, data, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToStorage indicates an expected call of AddToStorage.
func (mr *MockFileStorageMockRecorder) AddToStorage(name, data, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToStorage", reflect.TypeOf((*MockFileStorage)(nil).AddToStorage), name, data, info)
}

// DeleteByIDs mocks base method.
func (m *MockFileStorage) DeleteByIDs(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockFileStorageMockRecorder) DeleteByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockFileStorage)(nil).DeleteByIDs), ids)
}

// DeleteByName mocks base method.
func (m *MockFileStorage) DeleteByName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName.
func (mr *MockFileStorageMockRecorder) DeleteByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByName", reflect.TypeOf((*MockFileStorage)(nil).DeleteByName), name)
}

// GetByInfo mocks base method.
func (m *MockFileStorage) GetByInfo(info models.DataInfo) ([]byte, models.DataInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInfo", info)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(models.DataInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByInfo indicates an expected call of GetByInfo.
func (mr *MockFileStorageMockRecorder) GetByInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInfo", reflect.TypeOf((*MockFileStorage)(nil).GetByInfo), info)
}

// ReadEncryptedByID mocks base method.
func (m *MockFileStorage) ReadEncryptedByID(name string) (chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEncryptedByID", name)
	ret0, _ := ret[0].(chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEncryptedByID indicates an expected call of ReadEncryptedByID.
func (mr *MockFileStorageMockRecorder) ReadEncryptedByID(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEncryptedByID", reflect.TypeOf((*MockFileStorage)(nil).ReadEncryptedByID), name)
}

// ReadFileFromStorage mocks base method.
func (m *MockFileStorage) ReadFileFromStorage(filePath string, info models.DataInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileFromStorage", filePath, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFileFromStorage indicates an expected call of ReadFileFromStorage.
func (mr *MockFileStorageMockRecorder) ReadFileFromStorage(filePath, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileFromStorage", reflect.TypeOf((*MockFileStorage)(nil).ReadFileFromStorage), filePath, info)
}

// UpdateDataByName mocks base method.
func (m *MockFileStorage) UpdateDataByName(name string, data filemanager.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataByName", name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataByName indicates an expected call of UpdateDataByName.
func (mr *MockFileStorageMockRecorder) UpdateDataByName(name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataByName", reflect.TypeOf((*MockFileStorage)(nil).UpdateDataByName), name, data)
}

// UpdateInfoByName mocks base method.
func (m *MockFileStorage) UpdateInfoByName(name string, info models.DataInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfoByName", name, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfoByName indicates an expected call of UpdateInfoByName.
func (mr *MockFileStorageMockRecorder) UpdateInfoByName(name, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfoByName", reflect.TypeOf((*MockFileStorage)(nil).UpdateInfoByName), name, info)
}
